
package server;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Recomendador", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Recomendador {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws FileNotFoundException_Exception
     * @throws ClassNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "obtenerRutaTiempo", targetNamespace = "http://server/", className = "server.ObtenerRutaTiempo")
    @ResponseWrapper(localName = "obtenerRutaTiempoResponse", targetNamespace = "http://server/", className = "server.ObtenerRutaTiempoResponse")
    @Action(input = "http://server/Recomendador/obtenerRutaTiempoRequest", output = "http://server/Recomendador/obtenerRutaTiempoResponse", fault = {
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://server/Recomendador/obtenerRutaTiempo/Fault/FileNotFoundException"),
        @FaultAction(className = IOException_Exception.class, value = "http://server/Recomendador/obtenerRutaTiempo/Fault/IOException"),
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://server/Recomendador/obtenerRutaTiempo/Fault/ClassNotFoundException")
    })
    public List<String> obtenerRutaTiempo(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws ClassNotFoundException_Exception, FileNotFoundException_Exception, IOException_Exception
    ;

    /**
     * 
     * @return
     *     returns boolean
     * @throws ClassNotFoundException_Exception
     * @throws FileNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "gurdarDatos", targetNamespace = "http://server/", className = "server.GurdarDatos")
    @ResponseWrapper(localName = "gurdarDatosResponse", targetNamespace = "http://server/", className = "server.GurdarDatosResponse")
    @Action(input = "http://server/Recomendador/gurdarDatosRequest", output = "http://server/Recomendador/gurdarDatosResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://server/Recomendador/gurdarDatos/Fault/IOException"),
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://server/Recomendador/gurdarDatos/Fault/FileNotFoundException"),
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://server/Recomendador/gurdarDatos/Fault/ClassNotFoundException")
    })
    public boolean gurdarDatos()
        throws ClassNotFoundException_Exception, FileNotFoundException_Exception, IOException_Exception
    ;

    /**
     * 
     * @return
     *     returns boolean
     * @throws FileNotFoundException_Exception
     * @throws ClassNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "cargarDatos", targetNamespace = "http://server/", className = "server.CargarDatos")
    @ResponseWrapper(localName = "cargarDatosResponse", targetNamespace = "http://server/", className = "server.CargarDatosResponse")
    @Action(input = "http://server/Recomendador/cargarDatosRequest", output = "http://server/Recomendador/cargarDatosResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://server/Recomendador/cargarDatos/Fault/IOException"),
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://server/Recomendador/cargarDatos/Fault/FileNotFoundException"),
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://server/Recomendador/cargarDatos/Fault/ClassNotFoundException")
    })
    public boolean cargarDatos()
        throws ClassNotFoundException_Exception, FileNotFoundException_Exception, IOException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws FileNotFoundException_Exception
     * @throws ClassNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "obtenerRutaDistancia", targetNamespace = "http://server/", className = "server.ObtenerRutaDistancia")
    @ResponseWrapper(localName = "obtenerRutaDistanciaResponse", targetNamespace = "http://server/", className = "server.ObtenerRutaDistanciaResponse")
    @Action(input = "http://server/Recomendador/obtenerRutaDistanciaRequest", output = "http://server/Recomendador/obtenerRutaDistanciaResponse", fault = {
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://server/Recomendador/obtenerRutaDistancia/Fault/FileNotFoundException"),
        @FaultAction(className = IOException_Exception.class, value = "http://server/Recomendador/obtenerRutaDistancia/Fault/IOException"),
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://server/Recomendador/obtenerRutaDistancia/Fault/ClassNotFoundException")
    })
    public List<String> obtenerRutaDistancia(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws ClassNotFoundException_Exception, FileNotFoundException_Exception, IOException_Exception
    ;

    /**
     * 
     * @return
     *     returns boolean
     * @throws ClassNotFoundException_Exception
     * @throws FileNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "actualizarBaseDatos", targetNamespace = "http://server/", className = "server.ActualizarBaseDatos")
    @ResponseWrapper(localName = "actualizarBaseDatosResponse", targetNamespace = "http://server/", className = "server.ActualizarBaseDatosResponse")
    @Action(input = "http://server/Recomendador/actualizarBaseDatosRequest", output = "http://server/Recomendador/actualizarBaseDatosResponse", fault = {
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://server/Recomendador/actualizarBaseDatos/Fault/FileNotFoundException"),
        @FaultAction(className = IOException_Exception.class, value = "http://server/Recomendador/actualizarBaseDatos/Fault/IOException"),
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://server/Recomendador/actualizarBaseDatos/Fault/ClassNotFoundException")
    })
    public boolean actualizarBaseDatos()
        throws ClassNotFoundException_Exception, FileNotFoundException_Exception, IOException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ClassNotFoundException_Exception
     * @throws FileNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "actualizarRuta", targetNamespace = "http://server/", className = "server.ActualizarRuta")
    @ResponseWrapper(localName = "actualizarRutaResponse", targetNamespace = "http://server/", className = "server.ActualizarRutaResponse")
    @Action(input = "http://server/Recomendador/actualizarRutaRequest", output = "http://server/Recomendador/actualizarRutaResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://server/Recomendador/actualizarRuta/Fault/IOException"),
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://server/Recomendador/actualizarRuta/Fault/FileNotFoundException"),
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://server/Recomendador/actualizarRuta/Fault/ClassNotFoundException")
    })
    public boolean actualizarRuta(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws ClassNotFoundException_Exception, FileNotFoundException_Exception, IOException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     * @throws FileNotFoundException_Exception
     * @throws ClassNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "obtenerCosteTiempo", targetNamespace = "http://server/", className = "server.ObtenerCosteTiempo")
    @ResponseWrapper(localName = "obtenerCosteTiempoResponse", targetNamespace = "http://server/", className = "server.ObtenerCosteTiempoResponse")
    @Action(input = "http://server/Recomendador/obtenerCosteTiempoRequest", output = "http://server/Recomendador/obtenerCosteTiempoResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://server/Recomendador/obtenerCosteTiempo/Fault/IOException"),
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://server/Recomendador/obtenerCosteTiempo/Fault/FileNotFoundException"),
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://server/Recomendador/obtenerCosteTiempo/Fault/ClassNotFoundException")
    })
    public int obtenerCosteTiempo(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws ClassNotFoundException_Exception, FileNotFoundException_Exception, IOException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     * @throws ClassNotFoundException_Exception
     * @throws FileNotFoundException_Exception
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "obtenerCosteDistancia", targetNamespace = "http://server/", className = "server.ObtenerCosteDistancia")
    @ResponseWrapper(localName = "obtenerCosteDistanciaResponse", targetNamespace = "http://server/", className = "server.ObtenerCosteDistanciaResponse")
    @Action(input = "http://server/Recomendador/obtenerCosteDistanciaRequest", output = "http://server/Recomendador/obtenerCosteDistanciaResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://server/Recomendador/obtenerCosteDistancia/Fault/IOException"),
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://server/Recomendador/obtenerCosteDistancia/Fault/FileNotFoundException"),
        @FaultAction(className = ClassNotFoundException_Exception.class, value = "http://server/Recomendador/obtenerCosteDistancia/Fault/ClassNotFoundException")
    })
    public int obtenerCosteDistancia(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws ClassNotFoundException_Exception, FileNotFoundException_Exception, IOException_Exception
    ;

}
